// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	CreateLogLine(ctx context.Context, in *CreateLogLineRequest, opts ...grpc.CallOption) (*CreateLogLineResponse, error)
	BatchCreateLogLines(ctx context.Context, in *BatchCreateLogLinesRequest, opts ...grpc.CallOption) (*BatchCreateLogLinesResponse, error)
	GetAllLogLinesHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogLineHistories, error)
	GetLastNLogLinesHistory(ctx context.Context, in *LastNLogLinesHistoryRequest, opts ...grpc.CallOption) (*LogLineHistories, error)
	GetLogLineCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Count, error)
	GetLogLineByKey(ctx context.Context, in *LogLineByKeyRequest, opts ...grpc.CallOption) (*LogLine, error)
	GetLogLinesByPrefix(ctx context.Context, in *LogLineByPrefixRequest, opts ...grpc.CallOption) (*LogLines, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) CreateLogLine(ctx context.Context, in *CreateLogLineRequest, opts ...grpc.CallOption) (*CreateLogLineResponse, error) {
	out := new(CreateLogLineResponse)
	err := c.cc.Invoke(ctx, "/v1.LogService/CreateLogLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) BatchCreateLogLines(ctx context.Context, in *BatchCreateLogLinesRequest, opts ...grpc.CallOption) (*BatchCreateLogLinesResponse, error) {
	out := new(BatchCreateLogLinesResponse)
	err := c.cc.Invoke(ctx, "/v1.LogService/BatchCreateLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetAllLogLinesHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogLineHistories, error) {
	out := new(LogLineHistories)
	err := c.cc.Invoke(ctx, "/v1.LogService/GetAllLogLinesHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLastNLogLinesHistory(ctx context.Context, in *LastNLogLinesHistoryRequest, opts ...grpc.CallOption) (*LogLineHistories, error) {
	out := new(LogLineHistories)
	err := c.cc.Invoke(ctx, "/v1.LogService/GetLastNLogLinesHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLogLineCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/v1.LogService/GetLogLineCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLogLineByKey(ctx context.Context, in *LogLineByKeyRequest, opts ...grpc.CallOption) (*LogLine, error) {
	out := new(LogLine)
	err := c.cc.Invoke(ctx, "/v1.LogService/GetLogLineByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLogLinesByPrefix(ctx context.Context, in *LogLineByPrefixRequest, opts ...grpc.CallOption) (*LogLines, error) {
	out := new(LogLines)
	err := c.cc.Invoke(ctx, "/v1.LogService/GetLogLinesByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	CreateLogLine(context.Context, *CreateLogLineRequest) (*CreateLogLineResponse, error)
	BatchCreateLogLines(context.Context, *BatchCreateLogLinesRequest) (*BatchCreateLogLinesResponse, error)
	GetAllLogLinesHistory(context.Context, *emptypb.Empty) (*LogLineHistories, error)
	GetLastNLogLinesHistory(context.Context, *LastNLogLinesHistoryRequest) (*LogLineHistories, error)
	GetLogLineCount(context.Context, *emptypb.Empty) (*Count, error)
	GetLogLineByKey(context.Context, *LogLineByKeyRequest) (*LogLine, error)
	GetLogLinesByPrefix(context.Context, *LogLineByPrefixRequest) (*LogLines, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) CreateLogLine(context.Context, *CreateLogLineRequest) (*CreateLogLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogLine not implemented")
}
func (UnimplementedLogServiceServer) BatchCreateLogLines(context.Context, *BatchCreateLogLinesRequest) (*BatchCreateLogLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateLogLines not implemented")
}
func (UnimplementedLogServiceServer) GetAllLogLinesHistory(context.Context, *emptypb.Empty) (*LogLineHistories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLogLinesHistory not implemented")
}
func (UnimplementedLogServiceServer) GetLastNLogLinesHistory(context.Context, *LastNLogLinesHistoryRequest) (*LogLineHistories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNLogLinesHistory not implemented")
}
func (UnimplementedLogServiceServer) GetLogLineCount(context.Context, *emptypb.Empty) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLineCount not implemented")
}
func (UnimplementedLogServiceServer) GetLogLineByKey(context.Context, *LogLineByKeyRequest) (*LogLine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLineByKey not implemented")
}
func (UnimplementedLogServiceServer) GetLogLinesByPrefix(context.Context, *LogLineByPrefixRequest) (*LogLines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLinesByPrefix not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_CreateLogLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).CreateLogLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/CreateLogLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).CreateLogLine(ctx, req.(*CreateLogLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_BatchCreateLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateLogLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).BatchCreateLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/BatchCreateLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).BatchCreateLogLines(ctx, req.(*BatchCreateLogLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetAllLogLinesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetAllLogLinesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/GetAllLogLinesHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetAllLogLinesHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLastNLogLinesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastNLogLinesHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLastNLogLinesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/GetLastNLogLinesHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLastNLogLinesHistory(ctx, req.(*LastNLogLinesHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLogLineCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogLineCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/GetLogLineCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogLineCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLogLineByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLineByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogLineByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/GetLogLineByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogLineByKey(ctx, req.(*LogLineByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLogLinesByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLineByPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogLinesByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LogService/GetLogLinesByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogLinesByPrefix(ctx, req.(*LogLineByPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogLine",
			Handler:    _LogService_CreateLogLine_Handler,
		},
		{
			MethodName: "BatchCreateLogLines",
			Handler:    _LogService_BatchCreateLogLines_Handler,
		},
		{
			MethodName: "GetAllLogLinesHistory",
			Handler:    _LogService_GetAllLogLinesHistory_Handler,
		},
		{
			MethodName: "GetLastNLogLinesHistory",
			Handler:    _LogService_GetLastNLogLinesHistory_Handler,
		},
		{
			MethodName: "GetLogLineCount",
			Handler:    _LogService_GetLogLineCount_Handler,
		},
		{
			MethodName: "GetLogLineByKey",
			Handler:    _LogService_GetLogLineByKey_Handler,
		},
		{
			MethodName: "GetLogLinesByPrefix",
			Handler:    _LogService_GetLogLinesByPrefix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/log.proto",
}
